#!/usr/bin/env bash

### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
    local _ret=$2
    test -n "$_ret" || _ret=1
    test "$_PRINT_HELP" = yes && print_help >&2
    echo "$1" >&2
    exit ${_ret}
}

begins_with_short_option()
{
    local first_option all_short_options
    all_short_options='h'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_local="off"

print_help ()
{
    printf '%s\n' "The general script's help msg"
    printf 'Usage: %s [--(no-)local] [-h|--help]\n' "$0"
    printf '\t%s\n' "--local,--no-local: boolean optional argument help msg (off by default)"
    printf '\t%s\n' "-h,--help: Prints help"
}

parse_commandline ()
{
    while test $# -gt 0
    do
	_key="$1"
	case "$_key" in
	    --no-local|--local)
		_arg_local="on"
		test "${1:0:5}" = "--no-" && _arg_local="off"
		;;
	    -h|--help)
		print_help
		exit 0
		;;
	    -h*)
		print_help
		exit 0
		;;
	    *)
		_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
		;;
	esac
	shift
    done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

ARGS="$@"
DIR=$(dirname "$0")
SCRIPT="${DIR}/mngr.R"

if [ "$_arg_local" = on ]; then
    Rscript --no-init-file "$SCRIPT" "$ARGS"
else
    jobids=$(nice -n 19 Rscript --no-init-file "$SCRIPT" "$ARGS")
    result=$?
    if [ $result -eq 0 ]; then
        if [ -n "$jobids" ]; then
            echo "$jobids"
            jobids=$(echo "$jobids" | tail -1)
            mngr-monitor "$jobids"
        fi
    fi
fi
